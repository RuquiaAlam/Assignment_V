import { APIKeys } from './internalTypes';
declare const cf: (endpoint: string) => {
    login: (username: string, password: string) => Promise<{
        organizations: {
            list: (qs?: any) => Promise<import("./apis/types").PaginatedV3<import("./apis/organizations").OrganizationV3> | import("./apis/types").APIError>;
            spaces: (organization: string, qs?: any) => Promise<import("./apis/types").APIError | import("./apis/types").PaginatedV2<import("./apis/spaces").SpaceV2>>;
            users: {
                all: (organization: string, qs?: any) => Promise<import("./apis/types").APIError | import("./apis/types").PaginatedV2<import("./apis/types").EntityV2<{
                    admin: boolean;
                    active: boolean;
                    default_space_guid: string | null;
                    username: string;
                    spaces_url: string;
                    organizations_url: string;
                    managed_organizations_url: string;
                    audited_organizations_url: string;
                    managed_spaces_url: string;
                    audited_spaces_url: string;
                }>>>;
            };
            managers: {
                add: (organization: string, username: string) => Promise<import("./apis/types").APIError | import("./apis/types").EntityV2<{
                    name: string;
                    billing_enabled: boolean;
                    quota_definition_guid: string;
                    status: string;
                    quota_definition_url: string;
                    spaces_url: string;
                    domains_url: string;
                    private_domains_url: string;
                    users_url: string;
                    managers_url: string;
                    billing_managers_url: string;
                    auditors_url: string;
                    app_events_url: string;
                    space_quota_definitions_url: string;
                }>>;
            };
        };
        spaces: {
            list: (qs?: any) => Promise<import("./apis/types").APIError | import("./apis/types").PaginatedV3<import("./apis/spaces").SpaceV2>>;
        };
    }>;
};
export { cf };
