import { Login } from '../internalTypes';
import { PaginatedV3, PaginatedV2, APIError, EntityV2 } from './types';
import { SpaceV2 } from './spaces';
declare type OrganizationV3 = {
    guid: string;
    created_at: string;
    updated_at: string;
    name: string;
    suspended: boolean;
};
declare type OrganizationUserEntityV2 = {
    admin: boolean;
    active: boolean;
    default_space_guid: null | string;
    username: string;
    spaces_url: string;
    organizations_url: string;
    managed_organizations_url: string;
    audited_organizations_url: string;
    managed_spaces_url: string;
    audited_spaces_url: string;
};
declare type OrganizationUserV2 = EntityV2<OrganizationUserEntityV2>;
declare type AddManagerEntityV2 = {
    name: string;
    billing_enabled: boolean;
    quota_definition_guid: string;
    status: string;
    quota_definition_url: string;
    spaces_url: string;
    domains_url: string;
    private_domains_url: string;
    users_url: string;
    managers_url: string;
    billing_managers_url: string;
    auditors_url: string;
    app_events_url: string;
    space_quota_definitions_url: string;
};
declare function organizations(auth: Login, endpoint: string): {
    list: (qs?: any) => Promise<PaginatedV3<OrganizationV3> | APIError>;
    spaces: (organization: string, qs?: any) => Promise<APIError | PaginatedV2<SpaceV2>>;
    users: {
        all: (organization: string, qs?: any) => Promise<APIError | PaginatedV2<EntityV2<OrganizationUserEntityV2>>>;
    };
    managers: {
        add: (organization: string, username: string) => Promise<EntityV2<AddManagerEntityV2> | APIError>;
    };
};
export { organizations, OrganizationV3, OrganizationUserV2 };
